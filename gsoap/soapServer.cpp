/* soapServer.cpp
   Generated by gSOAP 2.8.79 for soapAPI.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.79 2019-05-11 02:02:06 GMT")
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	soap->keep_alive = soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->keep_alive > 0 && soap->max_keep_alive > 0)
			soap->keep_alive--;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if ((soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap))) && soap->error && soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:add"))
		return soap_serve_ns__add(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:sub"))
		return soap_serve_ns__sub(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:mult"))
		return soap_serve_ns__mult(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:divid"))
		return soap_serve_ns__divid(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:UpdateNotice"))
		return soap_serve_ns__UpdateNotice(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:PublishNotice"))
		return soap_serve_ns__PublishNotice(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__add(struct soap *soap)
{	struct ns__add soap_tmp_ns__add;
	struct ns__addResponse soap_tmp_ns__addResponse;
	int soap_tmp_int;
	soap_default_ns__addResponse(soap, &soap_tmp_ns__addResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__addResponse.result = &soap_tmp_int;
	soap_default_ns__add(soap, &soap_tmp_ns__add);
	if (!soap_get_ns__add(soap, &soap_tmp_ns__add, "ns:add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__add(soap, soap_tmp_ns__add.num1, soap_tmp_ns__add.num2, soap_tmp_ns__addResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__addResponse(soap, &soap_tmp_ns__addResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__addResponse(soap, &soap_tmp_ns__addResponse, "ns:addResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__addResponse(soap, &soap_tmp_ns__addResponse, "ns:addResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__sub(struct soap *soap)
{	struct ns__sub soap_tmp_ns__sub;
	struct ns__subResponse soap_tmp_ns__subResponse;
	int soap_tmp_int;
	soap_default_ns__subResponse(soap, &soap_tmp_ns__subResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__subResponse.result = &soap_tmp_int;
	soap_default_ns__sub(soap, &soap_tmp_ns__sub);
	if (!soap_get_ns__sub(soap, &soap_tmp_ns__sub, "ns:sub", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__sub(soap, soap_tmp_ns__sub.num1, soap_tmp_ns__sub.num2, soap_tmp_ns__subResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__subResponse(soap, &soap_tmp_ns__subResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__subResponse(soap, &soap_tmp_ns__subResponse, "ns:subResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__subResponse(soap, &soap_tmp_ns__subResponse, "ns:subResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__mult(struct soap *soap)
{	struct ns__mult soap_tmp_ns__mult;
	struct ns__multResponse soap_tmp_ns__multResponse;
	int soap_tmp_int;
	soap_default_ns__multResponse(soap, &soap_tmp_ns__multResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__multResponse.result = &soap_tmp_int;
	soap_default_ns__mult(soap, &soap_tmp_ns__mult);
	if (!soap_get_ns__mult(soap, &soap_tmp_ns__mult, "ns:mult", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__mult(soap, soap_tmp_ns__mult.num1, soap_tmp_ns__mult.num2, soap_tmp_ns__multResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__multResponse(soap, &soap_tmp_ns__multResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__multResponse(soap, &soap_tmp_ns__multResponse, "ns:multResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__multResponse(soap, &soap_tmp_ns__multResponse, "ns:multResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__divid(struct soap *soap)
{	struct ns__divid soap_tmp_ns__divid;
	struct ns__dividResponse soap_tmp_ns__dividResponse;
	int soap_tmp_int;
	soap_default_ns__dividResponse(soap, &soap_tmp_ns__dividResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__dividResponse.result = &soap_tmp_int;
	soap_default_ns__divid(soap, &soap_tmp_ns__divid);
	if (!soap_get_ns__divid(soap, &soap_tmp_ns__divid, "ns:divid", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__divid(soap, soap_tmp_ns__divid.num1, soap_tmp_ns__divid.num2, soap_tmp_ns__dividResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__dividResponse(soap, &soap_tmp_ns__dividResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__dividResponse(soap, &soap_tmp_ns__dividResponse, "ns:dividResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__dividResponse(soap, &soap_tmp_ns__dividResponse, "ns:dividResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__UpdateNotice(struct soap *soap)
{	struct ns__UpdateNotice soap_tmp_ns__UpdateNotice;
	struct ns__UpdateNoticeResponse soap_tmp_ns__UpdateNoticeResponse;
	soap_default_ns__UpdateNoticeResponse(soap, &soap_tmp_ns__UpdateNoticeResponse);
	soap_default_ns__UpdateNotice(soap, &soap_tmp_ns__UpdateNotice);
	if (!soap_get_ns__UpdateNotice(soap, &soap_tmp_ns__UpdateNotice, "ns:UpdateNotice", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__UpdateNotice(soap, soap_tmp_ns__UpdateNoticeResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__UpdateNoticeResponse(soap, &soap_tmp_ns__UpdateNoticeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__UpdateNoticeResponse(soap, &soap_tmp_ns__UpdateNoticeResponse, "ns:UpdateNoticeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__UpdateNoticeResponse(soap, &soap_tmp_ns__UpdateNoticeResponse, "ns:UpdateNoticeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__PublishNotice(struct soap *soap)
{	struct ns__PublishNotice soap_tmp_ns__PublishNotice;
	struct ns__PublishNoticeResponse soap_tmp_ns__PublishNoticeResponse;
	int soap_tmp_int;
	soap_default_ns__PublishNoticeResponse(soap, &soap_tmp_ns__PublishNoticeResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__PublishNoticeResponse.result = &soap_tmp_int;
	soap_default_ns__PublishNotice(soap, &soap_tmp_ns__PublishNotice);
	if (!soap_get_ns__PublishNotice(soap, &soap_tmp_ns__PublishNotice, "ns:PublishNotice", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__PublishNotice(soap, soap_tmp_ns__PublishNotice.str, soap_tmp_ns__PublishNoticeResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize_ns__PublishNoticeResponse(soap, &soap_tmp_ns__PublishNoticeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__PublishNoticeResponse(soap, &soap_tmp_ns__PublishNoticeResponse, "ns:PublishNoticeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__PublishNoticeResponse(soap, &soap_tmp_ns__PublishNoticeResponse, "ns:PublishNoticeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
